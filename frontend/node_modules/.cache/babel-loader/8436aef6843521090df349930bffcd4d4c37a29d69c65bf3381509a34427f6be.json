{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dhama\\\\Downloads\\\\jabi_platform_full_end_to_end\\\\frontend\\\\src\\\\contexts\\\\UserContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useEffect, useState } from 'react';\nimport { loginUser, getCurrentUser } from '../api/authApi';\n\n// UserContext provides simple authentication state.  In this demo we only\n// persist data in memory.  A real application would talk to an API and\n// store tokens securely.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext(null);\nexport function UserProvider({\n  children\n}) {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [tokens, setTokens] = useState(() => {\n    const access = localStorage.getItem('access_token');\n    const refresh = localStorage.getItem('refresh_token');\n    return access ? {\n      access,\n      refresh\n    } : null;\n  });\n\n  // On mount, if tokens exist, fetch the current user\n  useEffect(() => {\n    const fetchUser = async () => {\n      if (tokens && tokens.access) {\n        try {\n          const user = await getCurrentUser(tokens.access);\n          setCurrentUser(user);\n        } catch (err) {\n          console.error('Failed to fetch current user', err);\n          // Remove invalid tokens\n          localStorage.removeItem('access_token');\n          localStorage.removeItem('refresh_token');\n          setTokens(null);\n        }\n      }\n    };\n    fetchUser();\n  }, [tokens]);\n  const login = async ({\n    email,\n    password\n  }) => {\n    try {\n      const tokenPair = await loginUser({\n        email,\n        password\n      });\n      localStorage.setItem('access_token', tokenPair.access_token);\n      if (tokenPair.refresh_token) {\n        localStorage.setItem('refresh_token', tokenPair.refresh_token);\n      }\n      setTokens({\n        access: tokenPair.access_token,\n        refresh: tokenPair.refresh_token\n      });\n      const user = await getCurrentUser(tokenPair.access_token);\n      setCurrentUser(user);\n      return user;\n    } catch (err) {\n      throw err;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    setTokens(null);\n    setCurrentUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      currentUser,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(UserProvider, \"DMiCO/tZAmL14N7kGcX4hdDKu6s=\");\n_c = UserProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","loginUser","getCurrentUser","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","currentUser","setCurrentUser","tokens","setTokens","access","localStorage","getItem","refresh","fetchUser","user","err","console","error","removeItem","login","email","password","tokenPair","setItem","access_token","refresh_token","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/dhama/Downloads/jabi_platform_full_end_to_end/frontend/src/contexts/UserContext.js"],"sourcesContent":["import React, { createContext, useEffect, useState } from 'react';\nimport { loginUser, getCurrentUser } from '../api/authApi';\n\n// UserContext provides simple authentication state.  In this demo we only\n// persist data in memory.  A real application would talk to an API and\n// store tokens securely.\nexport const UserContext = createContext(null);\n\nexport function UserProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [tokens, setTokens] = useState(() => {\n    const access = localStorage.getItem('access_token');\n    const refresh = localStorage.getItem('refresh_token');\n    return access ? { access, refresh } : null;\n  });\n\n  // On mount, if tokens exist, fetch the current user\n  useEffect(() => {\n    const fetchUser = async () => {\n      if (tokens && tokens.access) {\n        try {\n          const user = await getCurrentUser(tokens.access);\n          setCurrentUser(user);\n        } catch (err) {\n          console.error('Failed to fetch current user', err);\n          // Remove invalid tokens\n          localStorage.removeItem('access_token');\n          localStorage.removeItem('refresh_token');\n          setTokens(null);\n        }\n      }\n    };\n    fetchUser();\n  }, [tokens]);\n\n  const login = async ({ email, password }) => {\n    try {\n      const tokenPair = await loginUser({ email, password });\n      localStorage.setItem('access_token', tokenPair.access_token);\n      if (tokenPair.refresh_token) {\n        localStorage.setItem('refresh_token', tokenPair.refresh_token);\n      }\n      setTokens({ access: tokenPair.access_token, refresh: tokenPair.refresh_token });\n      const user = await getCurrentUser(tokenPair.access_token);\n      setCurrentUser(user);\n      return user;\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    setTokens(null);\n    setCurrentUser(null);\n  };\n\n  return (\n    <UserContext.Provider value={{ currentUser, login, logout }}>\n      {children}\n    </UserContext.Provider>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}