{"ast":null,"code":"// API helper functions for communicating with the workshop microservice.\n//\n// The base URL can be configured via the REACT_APP_WORKSHOP_API_URL\n// environment variable.  If not provided, it defaults to\n// http://localhost:8001.  Each function returns a promise that\n// resolves to the parsed JSON response or throws an error if the\n// network request fails.\n\nconst API_URL = process.env.REACT_APP_WORKSHOP_API_URL || 'http://localhost:8001';\n\n// Helper to handle fetch responses\nasync function handleResponse(res) {\n  if (!res.ok) {\n    const text = await res.text();\n    throw new Error(text || res.statusText);\n  }\n  // If no content (204), return null\n  if (res.status === 204) return null;\n  return res.json();\n}\nexport async function getWorkshops() {\n  const res = await fetch(`${API_URL}/workshops`);\n  return handleResponse(res);\n}\nexport async function getWorkshop(id) {\n  const res = await fetch(`${API_URL}/workshops/${id}`);\n  return handleResponse(res);\n}\nexport async function createWorkshop(workshop) {\n  const res = await fetch(`${API_URL}/workshops`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(workshop)\n  });\n  return handleResponse(res);\n}\nexport async function updateWorkshop(id, data) {\n  const res = await fetch(`${API_URL}/workshops/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  return handleResponse(res);\n}\nexport async function deleteWorkshop(id) {\n  const res = await fetch(`${API_URL}/workshops/${id}`, {\n    method: 'DELETE'\n  });\n  return handleResponse(res);\n}\nexport async function createSection(workshopId, section) {\n  const res = await fetch(`${API_URL}/workshops/${workshopId}/sections`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(section)\n  });\n  return handleResponse(res);\n}\nexport async function updateSection(sectionId, data) {\n  const res = await fetch(`${API_URL}/workshops/sections/${sectionId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  return handleResponse(res);\n}\nexport async function deleteSection(sectionId) {\n  const res = await fetch(`${API_URL}/workshops/sections/${sectionId}`, {\n    method: 'DELETE'\n  });\n  return handleResponse(res);\n}\nexport async function createQuestion(sectionId, question) {\n  const res = await fetch(`${API_URL}/workshops/sections/${sectionId}/questions`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(question)\n  });\n  return handleResponse(res);\n}\nexport async function updateQuestion(questionId, data) {\n  const res = await fetch(`${API_URL}/workshops/questions/${questionId}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  return handleResponse(res);\n}\nexport async function deleteQuestion(questionId) {\n  const res = await fetch(`${API_URL}/workshops/questions/${questionId}`, {\n    method: 'DELETE'\n  });\n  return handleResponse(res);\n}","map":{"version":3,"names":["API_URL","process","env","REACT_APP_WORKSHOP_API_URL","handleResponse","res","ok","text","Error","statusText","status","json","getWorkshops","fetch","getWorkshop","id","createWorkshop","workshop","method","headers","body","JSON","stringify","updateWorkshop","data","deleteWorkshop","createSection","workshopId","section","updateSection","sectionId","deleteSection","createQuestion","question","updateQuestion","questionId","deleteQuestion"],"sources":["C:/Users/dhama/Downloads/jabi_platform_full_end_to_end/frontend/src/api/workshopApi.js"],"sourcesContent":["// API helper functions for communicating with the workshop microservice.\n//\n// The base URL can be configured via the REACT_APP_WORKSHOP_API_URL\n// environment variable.  If not provided, it defaults to\n// http://localhost:8001.  Each function returns a promise that\n// resolves to the parsed JSON response or throws an error if the\n// network request fails.\n\nconst API_URL = process.env.REACT_APP_WORKSHOP_API_URL || 'http://localhost:8001';\n\n// Helper to handle fetch responses\nasync function handleResponse(res) {\n  if (!res.ok) {\n    const text = await res.text();\n    throw new Error(text || res.statusText);\n  }\n  // If no content (204), return null\n  if (res.status === 204) return null;\n  return res.json();\n}\n\nexport async function getWorkshops() {\n  const res = await fetch(`${API_URL}/workshops`);\n  return handleResponse(res);\n}\n\nexport async function getWorkshop(id) {\n  const res = await fetch(`${API_URL}/workshops/${id}`);\n  return handleResponse(res);\n}\n\nexport async function createWorkshop(workshop) {\n  const res = await fetch(`${API_URL}/workshops`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(workshop),\n  });\n  return handleResponse(res);\n}\n\nexport async function updateWorkshop(id, data) {\n  const res = await fetch(`${API_URL}/workshops/${id}`, {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data),\n  });\n  return handleResponse(res);\n}\n\nexport async function deleteWorkshop(id) {\n  const res = await fetch(`${API_URL}/workshops/${id}`, {\n    method: 'DELETE',\n  });\n  return handleResponse(res);\n}\n\nexport async function createSection(workshopId, section) {\n  const res = await fetch(`${API_URL}/workshops/${workshopId}/sections`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(section),\n  });\n  return handleResponse(res);\n}\n\nexport async function updateSection(sectionId, data) {\n  const res = await fetch(`${API_URL}/workshops/sections/${sectionId}`, {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data),\n  });\n  return handleResponse(res);\n}\n\nexport async function deleteSection(sectionId) {\n  const res = await fetch(`${API_URL}/workshops/sections/${sectionId}`, {\n    method: 'DELETE',\n  });\n  return handleResponse(res);\n}\n\nexport async function createQuestion(sectionId, question) {\n  const res = await fetch(`${API_URL}/workshops/sections/${sectionId}/questions`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(question),\n  });\n  return handleResponse(res);\n}\n\nexport async function updateQuestion(questionId, data) {\n  const res = await fetch(`${API_URL}/workshops/questions/${questionId}`, {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(data),\n  });\n  return handleResponse(res);\n}\n\nexport async function deleteQuestion(questionId) {\n  const res = await fetch(`${API_URL}/workshops/questions/${questionId}`, {\n    method: 'DELETE',\n  });\n  return handleResponse(res);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}