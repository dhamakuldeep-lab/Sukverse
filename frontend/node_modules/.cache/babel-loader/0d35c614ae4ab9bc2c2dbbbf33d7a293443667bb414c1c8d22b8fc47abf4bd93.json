{"ast":null,"code":"// API helper functions for communicating with the auth microservice.\n//\n// The base URL can be configured via the REACT_APP_AUTH_API_URL\n// environment variable. If not provided, it defaults to\n// http://localhost:8000. Each function returns a promise that\n// resolves to the parsed JSON response or throws an error.\n\nconst API_URL = process.env.REACT_APP_AUTH_API_URL || 'http://localhost:8000';\nasync function handleResponse(res) {\n  if (!res.ok) {\n    const text = await res.text();\n    throw new Error(text || res.statusText);\n  }\n  return res.json();\n}\nexport async function registerUser({\n  email,\n  password\n}) {\n  const res = await fetch(`${API_URL}/auth/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  return handleResponse(res);\n}\nexport async function loginUser({\n  email,\n  password\n}) {\n  const res = await fetch(`${API_URL}/auth/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  return handleResponse(res);\n}\nexport async function getCurrentUser(accessToken) {\n  const res = await fetch(`${API_URL}/auth/me`, {\n    headers: {\n      Authorization: `Bearer ${accessToken}`\n    }\n  });\n  return handleResponse(res);\n}\nexport async function forgotPassword(email) {\n  const res = await fetch(`${API_URL}/auth/forgot-password`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email\n    })\n  });\n  return handleResponse(res);\n}\n\n// ================== Admin-only user management calls ==================\n\n// Get list of all users. Requires admin token.\nexport async function getUsers(accessToken) {\n  const res = await fetch(`${API_URL}/auth/users`, {\n    headers: {\n      Authorization: `Bearer ${accessToken}`\n    }\n  });\n  return handleResponse(res);\n}\n\n// Get a single user by ID. Requires admin token.\nexport async function getUserById(id, accessToken) {\n  const res = await fetch(`${API_URL}/auth/users/${id}`, {\n    headers: {\n      Authorization: `Bearer ${accessToken}`\n    }\n  });\n  return handleResponse(res);\n}\n\n// Update a user as admin. \"data\" is an object containing fields to update.\nexport async function adminUpdateUser(id, data, accessToken) {\n  const res = await fetch(`${API_URL}/auth/users/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${accessToken}`\n    },\n    body: JSON.stringify(data)\n  });\n  return handleResponse(res);\n}\n\n// Soft delete a user by ID (marks inactive). Requires admin token.\nexport async function adminDeleteUser(id, accessToken) {\n  const res = await fetch(`${API_URL}/auth/users/${id}`, {\n    method: 'DELETE',\n    headers: {\n      Authorization: `Bearer ${accessToken}`\n    }\n  });\n  return handleResponse(res);\n}","map":{"version":3,"names":["API_URL","process","env","REACT_APP_AUTH_API_URL","handleResponse","res","ok","text","Error","statusText","json","registerUser","email","password","fetch","method","headers","body","JSON","stringify","loginUser","getCurrentUser","accessToken","Authorization","forgotPassword","getUsers","getUserById","id","adminUpdateUser","data","adminDeleteUser"],"sources":["C:/Users/dhama/Downloads/jabi_platform_full_end_to_end/frontend/src/api/authApi.js"],"sourcesContent":["// API helper functions for communicating with the auth microservice.\n//\n// The base URL can be configured via the REACT_APP_AUTH_API_URL\n// environment variable. If not provided, it defaults to\n// http://localhost:8000. Each function returns a promise that\n// resolves to the parsed JSON response or throws an error.\n\nconst API_URL = process.env.REACT_APP_AUTH_API_URL || 'http://localhost:8000';\n\nasync function handleResponse(res) {\n  if (!res.ok) {\n    const text = await res.text();\n    throw new Error(text || res.statusText);\n  }\n  return res.json();\n}\n\nexport async function registerUser({ email, password }) {\n  const res = await fetch(`${API_URL}/auth/register`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ email, password }),\n  });\n  return handleResponse(res);\n}\n\nexport async function loginUser({ email, password }) {\n  const res = await fetch(`${API_URL}/auth/login`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ email, password }),\n  });\n  return handleResponse(res);\n}\n\nexport async function getCurrentUser(accessToken) {\n  const res = await fetch(`${API_URL}/auth/me`, {\n    headers: { Authorization: `Bearer ${accessToken}` },\n  });\n  return handleResponse(res);\n}\n\nexport async function forgotPassword(email) {\n  const res = await fetch(`${API_URL}/auth/forgot-password`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ email }),\n  });\n  return handleResponse(res);\n}\n\n// ================== Admin-only user management calls ==================\n\n// Get list of all users. Requires admin token.\nexport async function getUsers(accessToken) {\n  const res = await fetch(`${API_URL}/auth/users`, {\n    headers: { Authorization: `Bearer ${accessToken}` },\n  });\n  return handleResponse(res);\n}\n\n// Get a single user by ID. Requires admin token.\nexport async function getUserById(id, accessToken) {\n  const res = await fetch(`${API_URL}/auth/users/${id}`, {\n    headers: { Authorization: `Bearer ${accessToken}` },\n  });\n  return handleResponse(res);\n}\n\n// Update a user as admin. \"data\" is an object containing fields to update.\nexport async function adminUpdateUser(id, data, accessToken) {\n  const res = await fetch(`${API_URL}/auth/users/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${accessToken}`,\n    },\n    body: JSON.stringify(data),\n  });\n  return handleResponse(res);\n}\n\n// Soft delete a user by ID (marks inactive). Requires admin token.\nexport async function adminDeleteUser(id, accessToken) {\n  const res = await fetch(`${API_URL}/auth/users/${id}`, {\n    method: 'DELETE',\n    headers: { Authorization: `Bearer ${accessToken}` },\n  });\n  return handleResponse(res);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}